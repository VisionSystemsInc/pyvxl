version: 2
jobs:
  build:
    docker:
      - image: vsiri/vxl:latest
    working_directory: /source
    steps:

      - run:
          name: Setup
          command: |

            # clear the way
            mkdir -p /source/vxl /source/pyvxl /build /venv

            # system packages
            apt-get update
            DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
              python3-dev

            # recent pip
            curl -o /tmp/get-pip.py https://bootstrap.pypa.io/get-pip.py
            python3 /tmp/get-pip.py

            # system python packages
            pip3 install virtualenv pybind11[global]

            # create & activate venv
            virtualenv /venv
            source /venv/bin/activate

            # add virtualenv to .bashrc to automatically activate
            # for every following step
            echo "source /venv/bin/activate" >> $BASH_ENV

            # virtualenv packages
            pip3 install numpy

            # report
            set -x
            type -a python3
            python3 --version
            python3 -m site
            pip3 freeze --all

      - run:
          name: Checkout VXL
          command: |

            # clone vxl, optionally checkout specific version, report
            VXL_DIR="/source/vxl"
            git clone -b "${VXL_VERSION:-master}" \
                https://github.com/vxl/vxl.git "${VXL_DIR}"
            echo "git describe vxl = $(git -C "${VXL_DIR}" describe --tags HEAD --always)"

      - checkout:
          path: /source/pyvxl

      - run:
          name: configure
          working_directory: /build
          command: |

            # top-level cmake file
            mv /source/pyvxl/.circleci/config.cmake /source/CMakeLists.txt

            # configure
            OPTS=(
              -G Ninja
              -D CMAKE_BUILD_TYPE=Release
              -D PYVXL_CONTRIB_MAKE_ALL=ON
              -D PYVXL_DEBUG_MESSAGES=ON
            )
            cmake /source ${OPTS[@]}

      - run:
          name: compile
          working_directory: /build
          command: set -x && ninja -j${NINJA_JOBS:-$((`nproc` / 2))}

      - run:
          name: install
          working_directory: /build
          command: ninja install

      - run:
          name: test imports
          working_directory: /source/pyvxl
          command: ./test/test_import.bsh

      - run:
          name: test
          working_directory: /source/pyvxl
          command: python3 -m unittest discover -v test


workflows:
  version: 2
  commit:
    jobs:
      - build
  nightly:
    triggers:
      - schedule:
          cron: "0 0 * * *"
          filters:
            branches:
              only:
                - master
    jobs:
      - build
